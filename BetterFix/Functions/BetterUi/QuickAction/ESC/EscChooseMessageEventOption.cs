using System;
using System.Collections.Generic;
using System.Text;
using GameData;
using HarmonyLib;
using Random = UnityEngine.Random;
using BepInEx.Logging;
using UnityEngine;

namespace BetterFix
{
    /// <summary>
    /// 允许在对话事件中，使用ESC键来选择部分能够“结束对话”、“返回上一级”的选项
    /// </summary>
    [HarmonyPatch(typeof(OnChoose), "Update")]
    public static class EscChooseMessageEventOption
    {
        /// <summary>
        /// 作用
        /// </summary>
        /// <param name="__instance">原方法所属的实例</param>
        [HarmonyPostfix]
        private static void Update(OnChoose __instance)
        //原方法签名
        //private void Update()
        {
            //若 （没有处于不该接受快捷键的状态 且 选项“允许ESC快捷键”开启 且 按下了“ESC”键）
            if ((!ui_MessageWindow.Exists || !ui_MessageWindow.Instance.inputTextField.gameObject.activeInHierarchy) && Input.GetKeyDown(KeyCode.Escape) && Main.Setting.UiEscQuickAction.Value)
            {
                //本选项所对应的事件ID：将本实例的UnityEngine.Object的name属性以“,”分隔后的字符串数组中的下标为1的字符串
                int componentEventId = int.Parse(__instance.name.Split(',')[1]);
                //对应事件的事件要求文本
                string requirementText = (DateFile.instance.eventDate[componentEventId][6] == null) ? string.Empty : DateFile.instance.eventDate[componentEventId][6].Trim();

                //调试信息
                //if (Main.Setting.debugMode.Value)
                //{
                //    QuickLogger.Log(LogLevel.Info, "检测到ESC键 本选项所对应的事件ID:({0}) 事件文本:{1}",componentEventId, DateFile.instance.eventDate[componentEventId][3].Substring(0,UnityEngine.Mathf.Min(10, DateFile.instance.eventDate[componentEventId][3].Length)));
                //}

                //若事件要求不为空，结束判断（不适用ESC快捷键）
                if (requirementText != string.Empty && requirementText != "0")
                {
                    //if (Main.Setting.debugMode.Value)
                    //{
                    //    QuickLogger.Log(LogLevel.Info, "选项有事件要求 事件ID:({0}) 事件要求:({1}) ", componentEventId , requirementText);
                    //}

                    return;
                }

                //若 父组件中只有一个子组件 或 本选项对应的事件为特定事件
                if ((__instance.transform.parent.childCount == 1 || SomeTurnBackOrEndEventIds.Contains(componentEventId)))
                {
                    //if (Main.Setting.debugMode.Value)
                    //{
                    //    QuickLogger.Log(LogLevel.Info, "选项判断完成 事件ID:({0}) 子组件数:{1} 事件位于列表中:{2}", componentEventId, __instance.transform.parent.childCount, SomeTurnBackOrEndEventIds.Contains(componentEventId));
                    //}

                    //激活按键启用该选项
                    __instance.SetChoose();
                }

                #region 似乎用不到，弃用
#if false
                //父组件中有多个子组件
                else
                {
                    //实际显示的选项数量
                    int optionNumber = 0;
                    //检查所有子组件在场景中的启用情况，以此来更新实际显示的选项数量
                    for (int i = 0; i < __instance.transform.parent.childCount; i++)
                    {
                        if (__instance.transform.parent.GetChild(i).gameObject.activeInHierarchy)
                        {
                            optionNumber++;
                        }
                    }

                    if (Main.Setting.debugMode.Value)
                    {
                        QuickLogger.Log(LogLevel.Info, "选项判断完成 事件ID:({0}) 子组件数:{1} 显示选项选数:{2}", componentEventId, __instance.transform.parent.childCount, optionNumber);
                    }

                    //若实际显示的选项数量为1
                    if (optionNumber == 1)
                    {
                        //激活按键启用该选项
                        __instance.SetChoose();
                    }
                }
#endif
                #endregion

            }
        }

        /// <summary>
        /// 部分用于“返回上一级选项/结束对话”的事件ID列表
        /// </summary>
        public static readonly List<int> SomeTurnBackOrEndEventIds = new List<int>
        {
            900700001,  //返回上一级对话（其它话题……）
            1000000006, //结束对话（道别……）
            1200000002, //与婴儿结束对话（不明白婴孩说的话语……）
        };

        #region 弃用，全部一个个单列出来感觉效率好低，是我傻了（不过可以留作纪念，说不定啥时候需要向上方再添加特定事件呢）
#if false
        /// <summary>
        /// 未处于奇遇中时，个人觉得可用ESC来选择的事件ID列表
        /// </summary>
        public static readonly List<int> CanEscNormalEventId = new List<int>
        {
            100001,     //创建人物：开始创建……
            400001,     //突破超过步数限制：不惧生死，继续突破……

            10900001,   //弃婴（……）
            11400001,   //逃脱成功（逃避至附近的地点……）
            11500001,   //逃脱失败（迎战敌人……）

            12000001,   //普通奇遇捉到蛐蛐
            12100001,   //袭击战败被杀害
            12200001,   //太吾村商队（接待商人……）
            12500001,   //野怪较艺胜利（十分得意……）
            12600001,   //野怪较艺失败（垂头丧气……）
            12900001,   //开始剑冢（前往剑冢……）
            16500001,   //直接离开剑冢（离开剑冢……）
            16600001,   //得胜离开剑冢（离开剑冢……）
            16700001,   //野外遭遇相枢化身
            17600001,   //野外相枢战战胜
            18600001,   //野外相枢战战败
            18500001,   //野外相枢战逃跑

            21500001,   //选择拒绝讨要（无视）后的结尾
            21500002,   //选择拒绝讨要（刚正）后的结尾
            21500003,   //选择拒绝讨要（仁善）后的结尾
            21500004,   //选择拒绝讨要（中庸）后的结尾
            21500005,   //选择拒绝讨要（叛逆）后的结尾
            21500006,   //选择拒绝讨要（唯我）后的结尾
            23400001,   //同意NPC的结缘请求（喜不自胜！）
            23500001,   //推脱NPC的结缘请求（无话可说……）
            23600001,   //拒绝NPC的结缘请求（造化弄人……）
            24400001,   //生出蛐蛐（哭笑不得……）
            24600001,   //异胎（从梦中醒来……）
            24900001,   //胎教（心满意足……）

            25500001,   //放逐入魔者（……）
            25400001,   //收留入魔者（喜不自胜……）
            25600001,   //立刻再入魔（……）
            25700001,   //杀死入魔者
            26300001,   //奇书战斗胜利（技高一筹！）
            26400001,   //奇书战斗失败（技不如人……）
            26500001,   //寻求奇书同意（也不知这是福，亦或是祸？）
            26600001,   //寻求奇书拒绝（……）
            27300001,   //奇书夺取失败
            27400001,   //宝典出世 （……）
            27500001,   //率性奇书被施毒成功 呃……啊……（身中剧毒！）
            27600001,   //率性奇书被施毒失败 好不凶险！（幸免于难……）
            27800001,   //收留外道（喜不自胜……）
            27900001,   //外道离开（……）
            28100001,   //奇书狂性大发结束（如此便好……）

            103100001,  //发现促织
            103200001,  //促织捕捉结束
            129900001,  //拜帖时掌门不在（只得作罢……）
            130300001,  //与掌门见面（与BN见面……）
            130400001,  //收到所救弟子送礼（盛情难却，欣然接受！）

            900700001,  //返回上一级对话（其它话题……）
            900900003,  //拜帖掌门不在（只得作罢……）
            910700001,  //完成赴约（如约而至……）
            912000001,  //切磋胜利（其它话题……）
            912100001,  //切磋失败（其它话题……）
            912200001,  //切磋逃跑（其它话题……）
            912800001,  //邀请入队（继续上路……）
            913800001,  //确定逐出村子（多说无益……）
            916500001,  //羞辱对方（不欢而散……）
            916700001,  //失败逃跑（走为上策……）
            916800001,  //抢夺战胜利（十分得意……）
            916900001,  //抢夺战失败（寻回）（走为上策……）
            917100001,  //抢夺道具成功（横抢硬夺……）
            918000001,  //袭击/劫持战逃跑（落荒而逃……）
            918400001,  //袭击选择取其性命（量小非君子，无毒不丈夫！）
            918700001,  //劫持选择五花大绑（这便随我走罢！）
            919000001,  //放走敌人（……）
            919100001,  //各类喜事（喜不自胜！）
            920600001,  //表白失败（伤心欲绝……）
            924500001,  //拒绝学艺（真是可惜……）
            926900001,  //刚正取得支持成功（其它话题……）
            933000001,	//各类放弃（只得作罢……）
            927900001,  //斗蛐蛐胜利（其它话题……）
            928000001,  //斗蛐蛐失败（其它话题……）（……）
            929300001,  //惩戒（恶有恶报……）

            937900001,  //手艺人无钱修理道具（囊中羞涩……）
            938000001,  //手艺人完成修理（完成修理……）
            938900001,  //同意远走高飞（……）
            939100001,  //准备远走高飞（……）
            950100001,  //芜行俚语（如此便好……）
            950900001,  //请求卖艺失败（只得作罢……）
            951200001,  //执书叩问（取回书籍……）
            951600001,  //伏魔法事（开始伏魔……）
            951700002,  //伏魔法事（如此便好……）
            951900001,  //传法度人准备（开始度化……）
            952100001,  //传法度人失败（只得作罢……）
            952000002,  //传法度人结束（如此便好……）
            952400001,  //开办酒宴/茶会失败（只得作罢……）
            957300001,  //相虫成功（喜不自胜！）
            957700001,  //芜行俚语失败（只得作罢……）
            957800001,  //芜行俚语被打（弄巧成拙……）

            1000000006, //结束对话（道别……）
            1200000002, //与婴儿结束对话（不明白婴孩说的话语……）
        };

        /// <summary>
        /// 通常奇遇中，个人觉得可用ESC来选择的事件ID列表
        /// </summary>
        public static readonly List<int> CanEscInStoryEventId = new List<int>
        {
            200100001,  //恶丐窝终点（迎战敌人……）
            200200001,  //贼人营寨终点（迎战敌人……）
            200300001,  //悍匪砦终点（迎战敌人……）
            200400001,  //叛徒结伙终点（迎战敌人……）
            200500001,  //恶人谷终点（迎战敌人……）
            200600001,  //迷香阵终点（迎战敌人……）
            200700001,  //乱葬岗终点（迎战敌人……）
            200800001,  //异士居终点（迎战敌人……）
            200900001,  //邪人死地终点（迎战敌人……）
            201000001,  //修罗场终点（迎战敌人……）
            201100001,  //群魔乱舞终点（迎战敌人……）
            201200001,  //弃世绝境终点（迎战敌人……）

            210000001,  //胜利后直接离开（离开此地……）
            220100001,  //刚正结束巢穴战斗（离开此地……）
            220200001,  //仁善结束巢穴战斗（离开此地……）
            220300001,  //中庸结束巢穴战斗（离开此地……）
            220400001,  //叛逆结束巢穴战斗（离开此地……）
            220500001,  //唯我结束巢穴战斗（离开此地……）

            230100001,  //在奇遇中战败（……）
            230200001,  //在奇遇终点战败
            230300001,  //在奇遇中逃跑（……）
            230400001,  //在奇遇终点逃跑（……）
            230500001,  //在剑冢中战败

            230600001,  //奇书奇遇起点（志在必得！）
            230700001,  //奇书奇遇终点（绝无退让！）
            231200001,  //奇书奇遇终点无人（喜不自胜！）
            231300001,  //奇书奇遇终点胜利 （技压群豪！）
            231400001,  //奇书奇遇终点失败
            231500001,  //奇书奇遇终点逃跑 （……）
            232100001,  //奇书仁善战斗胜利（十分得意……）
            232200001,  //奇书仁善战斗失败（技不如人……）
            232300001,  //奇书刚正战斗胜利（十分得意……）
            232400001,  //奇书刚正战斗失败（退出此地……）

            232600001,  //材料奇遇结束（离开此地……）
            234700001,  //召唤相枢（……）
            235600001,  //召唤相枢·伏虞剑（惊魂未定……）
            300100001,  //商贾集会终点（离开集会……）

            951000001,  //开始卖艺（抖擞精神！）
            951100001,  //结束卖艺（收摊散场……）
            952500001,  //开始酒宴（盛情难却……）
            952600001,  //结束酒宴（酒阑宾散……）
            952700003,  //结束敬酒（停杯暂别……）
            956300001,  //开始茶会（盛情难却……）
            956400001,  //结束茶会（茶凉宾散……）
            956500003,  //结束敬茶（停杯暂别……）

            960100001,  //私奔争端（飞身前去寻找D0……）
            960600001,  //私奔争端终点（刚正/仁善/中庸）（走上石台……）
            961600001,  //私奔者被处罚（痛心疾首！）
            962300001,  //救人成功（放下D0……）
            962400001,  //救人失败被杀
            962500001,  //救人失败（痛心疾首！）
            962600001,  //夺人成功结束（喜不自胜！）
            963900001,  //出手相救成功（放下D0……）
            964000001,  //相救成功结束叛逆（喜不自胜！）
            964100001,  //相救成功结束唯我（喜不自胜！）
            
            1210200001, //比武招亲打赏仆人（进入会场……）
            1210300001, //比武招亲（进入会场……）
            1210500001, //比武招亲失败（离开会场……）
            1210600001, //比武招亲（继续前进……）
            1211300001, //比武招亲（迎战敌人……）
            1211400001, //比武招亲（不明所以……）
            1211500001, //比武招亲（不明所以……）
            1212100001, //比武招亲（若有所思……）
            1212600001, //比武招亲（回味无穷……）
            1213400001, //招亲资源被窃追讨（不明所以……）
            1213700001, //招亲道具被窃追讨（不明所以……）
            1214000001, //比武招亲反抗（好不气恼……）
            1214100001, //比武招亲忍受（或无大碍……）
            1214500001, //招亲终点（跃上擂台！）
            1215300001, //招亲结婚拒绝结婚（离开会场……）
            1215400001, //招亲结婚顺利完成（喜不自胜！）
        };

        /// <summary>
        /// 门派大小较奇遇中，个人觉得可用ESC来选择的事件ID列表
        /// </summary>
        public static readonly List<int> CanEscGangCompetitionStoryEventIds = new List<int>
        {

        };

        /// <summary>
        /// 武林大会奇遇中，个人觉得可用ESC来选择的事件ID列表
        /// </summary>
        public static readonly List<int> CanEscWuLingDaHuiStoryEventIds = new List<int>
        {

        };

        /// <summary>
        /// 促织大赛奇遇中，个人觉得可用ESC来选择的事件ID列表
        /// </summary>
        public static readonly List<int> CanEscQuQuDaHuiStoryEventIds = new List<int>
        {

        };
#endif
        #endregion
    }
}
